public class 接口 {
    public static void main(String[] args) {
        /* 
        接口的定义和使用:
            1. 接口用关键字interface来定义
                public interface 接口名 {}
            2. 接口不能实例化
            3. 接口和类之间是实现关系, 通过implements关键字表示
                public class 类名 implements 接口名 {}
            4. 接口的子类(实现类)
                1. 要么重写接口中的所有抽象方法
                2. 要么是抽象类
        注意点:
            1. 接口和类的实现关系, 可以单实现, 也可以多实现
                public class 类名 implements 接口名1, 接口名2 {}
            2. 实现类可以在继承一个类的同时实现多个接口
                public class 类名 extends 父类 implements 接口1, 接口2 {}
        接口中成员的特点:
            1. 成员变量:
                1. 只能是常量
                2. 默认修饰符: public static final
            2. 构造方法
                没有
            3. 成员方法
                抽象方法
                有方法体的方法
                私有方法
                默认修饰符: public abstract
        接口和类之间的关系:
            1. 类和类的关系:
                继承关系, 只能单继承, 不能多继承, 但是可以多层继承
            2. 类和接口的关系
                实现关系, 可以单实现, 也可以多实现, 还可以在继承一个类的同时实现多个接口
            3. 接口和接口的关系:
                继承关系, 可以单继承, 也可以多继承
        JDK8之后允许接口中定义默认方法, 需要用default关键字修饰
            作用: 解决接口升级问题
            接口中默认方法的定义格式:
                格式: public default 返回值类型 方法名(参数列表) {}
                范例: public default void show() {}
            接口中默认方法的注意事项:
                1. 默认方法不是抽象方法, 所以不强制被重写. 但是如果被重写, 重写的时候去掉default关键字
                2. public 可以省略, default不能被省略
                3. 如果实现了多个接口, 多个接口中存在相同名字的默认方法, 子类必须对该方法进行重写
        JDK8之后允许在接口中定义静态方法, 需要用static修饰
            接口中静态方法的定义格式:
                格式: public static 返回值类型 方法名(参数列表) {}
                范例: public static void show() {}
            接口中静态方法的注意事项:
                1. 静态方法只能通过接口调用, 不能通过实现类名或者对象名调用
                2. public可以省略, static不能省略
                3. 接口中静态方法不需要重写
        JDK9之后允许在接口中定义私有方法
            接口中私有方法的定义格式:
                格式1: private 返回值类型 方法名(参数列表) {}
                范例1: private void show() {}
                格式2: private static 返回值类型 方法名(参数列表) {}
                范例2: private static void method() {}
        适配器设计模式:
            解决接口与接口实现类之间的矛盾问题
            应用场景:
                当一个接口中抽象方法过多, 但是我只要使用其中一部分的时候, 就可以使用适配器设计模式
            书写步骤:
                1. 编写中间类XXXAdapter, 实现对应的接口, 对应接口中的抽象方法进行空实现
                2. 让真正的实现类继承中间类, 并重写需要用的方法
                3. 为了避免其他类创建适配器类的对象, 中间的适配器用abstract进行修饰
         */
    }
}
