package 异常;

public class 异常讲解 {
    public static void main(String[] args) {
        /* 
        Error:
            代表系统级别的错误
        Exception:
            代表程序可能出现的问题
        编译时异常:
            在编译阶段, 必须要手动处理, 否则代码报错
            核心: 提醒程序员检查本地信息
        运行时异常:
            在编译阶段是不需要处理的, 是代码运行时出现的异常
            核心: 表示由于参数错误而导致的问题
        编译阶段:
            Java不会运行代码, 只会检查语法是否错误, 或者做一些性能的优化
        异常的作用:
            1. 异常是用来查询bug的关键参考信息
            2. 异常可以作为方法内部的一种特殊返回值, 以便通知调用者底层的执行情况
        异常的处理方式:
            1. 虚拟机默认的处理方案
                1. 把异常的名称, 异常原因及异常出现的位置等信息输出在控制台
                2. 程序停止执行, 下面的代码不会执行
            2. 自己处理(捕获异常)
                格式:
                    try {
                        可能出现异常的代码;
                    } catch (异常类名 变量名) {
                        异常的处理代码;
                    }
                目的: 当代码出现异常时, 可以让程序继续往下执行
                1. 如果try中没有遇到问题, 怎么执行?
                    会把try里面的代码全部执行完毕, 不会执行catch里面的代码
                    注意: 只有出现异常才会执行catch的语句
                2. 如果try中有多个问腿, 怎么执行?
                    会写多个catch与之对应
                    注意: 如果我们要捕获多个异常, 这些异常中如果存在父子关系, 那么父类一定要写在下面
                3. 如果try中的异常没有被捕获, 怎么执行
                    虚拟机默认方法执行
                4. 如果try中遇到了问题, 那么try下面的代码还会执行吗?
                    不会执行
                Throwable的成员方法:
                    1. public String getMessage() 
                        返回此throwable的详细消息字符串
                    2. public String toString() 
                        返回此可抛出的简短讯息
                    3. public void printStackTrace() 
                        把异常的错误信息输出在控制台
            3. 抛出异常
                1. throws
                    1. 写在方法定义处, 表明声明一个异常
                    2. 告诉调用者, 使用本方法可能会有哪些异常
                    格式:
                        public void 方法() throws 异常类名1, 异常类名2...{
                            ...
                        }
                    注意点:
                        1. 编译时异常必须写
                        2. 运行时异常可以不写
                2. throw
                    1. 写在方法内, 结束方法
                    2. 手动抛出异常对象, 交给调用者
                    3. 方法中下面的代码不再执行了
                    格式:
                        public void 方法() {
                            throw new NullPointerException();
                        }
            自定义异常:
                1. 定义异常类
                2. 写继承关系
                3. 空参构造
                4. 带参构造
                    意义: 就是为了让控制台的报错信息更加的见名知意
         */
    }
}
