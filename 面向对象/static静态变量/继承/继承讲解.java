package static静态变量.继承;

public class 继承讲解 {
    public static void main(String[] args) {
        /* 
        Java中提供一个关键字extends, 用这个关键字, 我们可以让一个类和另一个类建立起继承关系
            public class Student extends Person {}
            Student称为子类(派生类), Person称为父类(基类或超类)
        使用继承的好处:
            1. 可以把多个子类中重复的代码抽取到父类中, 提高代码的复用性
            2. 子类可以在父类的基础上, 增加其他的功能, 使子类更强大
        什么时候使用继承?
            当类与类之间, 存在相同(共性)的内容, 并满足子类是父类中的一种, 就可以考虑使用继承, 来优化代码
        继承的特点:
            Java只支持单继承, 不支持多继承, 但支持多层继承
            每一个类都直接或者间接的继承于Object
            只有父类的虚方法才能被子类继承(final, static private等不可以继承)
        继承中成员变量的访问特点:
            就近原则: 谁离我近, 我就用谁 (先在局部位置找, 本类成员位置找, 父类成员位置找, 逐级往上)
        继承中成员方法的访问特点:
            直接调用满足就近原则: 谁离我近, 我就用谁 (先在局部位置找, 本类成员位置找, 父类成员位置找, 逐级往上)  
        方法的重写:
            当父类的方法不能满足子类现在的需求时, 需要进行方法重写
            书写格式:
                在继承体系中, 子类出现了和父类中一模一样的方法声明, 我们就称子类这个方法是重写的方法
            @Override重写注解:
                1. @Override是放在重写后的方法上, 检验子类重写时语法是否正确
                2. 加上注解后如果有红色波浪线, 表示语法出现错误
                3. 建议重写方法都加上@Override注解, 代码安全, 优雅  
        方法重写注意事项和要求:
            1. 重写方法的名称, 形参列表必须与父类中的完全一致
            2. 子类重写父类方法时, 访问权限子类必须大于等于父类(空着不写 < protected < public)
            3. 子类重写父类方法时, 返回值类型子类必须小于等于父类
            4. 建议: 重写的方法尽量和父类保持一致
            5. 只有能被添加到虚方法表的方法才能被重写 
        继承中构造方法的访问特点:
            1. 父类中的构造方法不会被子类继承
            2. 子类中所有的构造方法默认先访问父类中的无参构造, 再执行自己
                原因: 子类在初始化的时候, 有可能会使用到父类中的数据, 如果父类没有完成初始化, 子类将无法使用父类的数据
                Ps: 子类初始化之前, 一定要调用父类构造方法先完成父类数据空间的初始化
                如何调用父类构造方法的?
                    子类构造方法的第一行语句默认都是: super(), 不写也存在, 且必须在第一行
                    如果想调用父类有参构造, 必须手动写super进行调用
        this, super使用总结:
            this: 理解为一个变量, 表示当前方法调用者的地址值
            super: 代表父类存储空间
         */
    }
}
